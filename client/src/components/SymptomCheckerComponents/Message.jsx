// client/src/components/SymptomCheckerComponents/Message.jsx
import React, { useState } from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

const Message = ({ message, onFeedback, showContextIndicator = true }) => {
    const [showMetadata, setShowMetadata] = useState(false);
    const [showSources, setShowSources] = useState(false);
    const [copySuccess, setCopySuccess] = useState(false);
    
    const isUser = message.sender === 'user';
    const isError = message.isError || false;

    const formatTimestamp = (timestamp) => {
        if (timestamp instanceof Date) {
            return timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }
        return new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    };

    // Add function to clean response text and remove disclaimers
    const cleanResponseText = (text) => {
        if (!text) return text;
        
        // Remove disclaimer section
        const parts = text.split('---');
        if (parts.length > 1) {
            return parts[0].trim(); // Take only the content before "---"
        }
        
        // Remove sources section
        const sourcesIndex = text.toLowerCase().indexOf('sources:');
        if (sourcesIndex > -1) {
            return text.substring(0, sourcesIndex).trim();
        }
        
        // Remove "Response generated by..." section
        const responseGenIndex = text.toLowerCase().indexOf('response generated by');
        if (responseGenIndex > -1) {
            return text.substring(0, responseGenIndex).trim();
        }
        
        return text;
    };

    const copyToClipboard = async (text) => {
        try {
            await navigator.clipboard.writeText(text);
            setCopySuccess(true);
            setTimeout(() => setCopySuccess(false), 2000);
        } catch (err) {
            console.error('Failed to copy text: ', err);
        }
    };

    const downloadResponse = () => {
        const data = {
            message: message.text,
            timestamp: message.timestamp,
            sources: message.sources || [],
            metadata: {
                hasContext: message.hasContext,
                generationTime: message.generationTime,
                feedback: message.feedback
            }
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `medibot-response-${Date.now()}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    };

    // Smart content sizing based on content length
    const getMessageWidth = () => {
        const textLength = message.text.length;
        if (textLength < 100) return 'max-w-[70%] sm:max-w-[60%]';
        if (textLength < 300) return 'max-w-[85%] sm:max-w-[75%]';
        return 'max-w-[95%] sm:max-w-[85%]';
    };

    return (
        <div className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-4 sm:mb-6`}>
            <div className={`flex items-start space-x-2 sm:space-x-3 ${getMessageWidth()} ${isUser ? 'flex-row-reverse space-x-reverse' : ''}`}>
                {/* Avatar */}
                <div className={`w-7 h-7 sm:w-9 sm:h-9 rounded-full flex items-center justify-center flex-shrink-0 shadow-sm ${
                    isUser 
                        ? 'bg-gradient-to-r from-blue-600 to-blue-700' 
                        : isError 
                        ? 'bg-gradient-to-r from-red-500 to-red-600'
                        : 'bg-gradient-to-r from-green-500 to-green-600'
                }`}>
                    <span className="text-white text-xs sm:text-sm font-medium">
                        {isUser ? 'Y' : isError ? '‚ö†Ô∏è' : 'üè•'}
                    </span>
                </div>

                {/* Message Content */}
                <div className="flex-1 min-w-0">
                    {/* Context Indicator */}
                    {!isUser && message.hasContext && showContextIndicator && (
                        <div className="flex items-center space-x-2 mb-2">
                            <div className="w-1.5 h-1.5 bg-green-500 rounded-full animate-pulse"></div>
                            <span className="text-xs font-medium text-green-600 bg-green-50 px-2 py-1 rounded-full">
                                Following up on our conversation
                            </span>
                        </div>
                    )}

                    {/* Message Bubble */}
                    <div
                        className={`relative px-3 py-2 sm:px-4 sm:py-3 rounded-2xl shadow-sm ${
                            isUser
                                ? 'bg-blue-600 text-white rounded-tr-sm'
                                : isError
                                ? 'bg-red-50 text-red-800 border border-red-200 rounded-tl-sm'
                                : 'bg-white text-gray-800 border border-gray-200 rounded-tl-sm'
                        }`}
                    >
                        {/* Enhanced Message Text */}
                        <div className={`${isUser ? 'text-white' : 'text-gray-800'}`}>
                            {isUser ? (
                                <p className="text-sm sm:text-base leading-relaxed whitespace-pre-wrap font-medium">
                                    {message.text}
                                </p>
                            ) : (
                                <div className="prose prose-sm sm:prose-base max-w-none">
                                    <ReactMarkdown 
                                        remarkPlugins={[remarkGfm]}
                                        components={{
                                            p: ({children}) => (
                                                <p className="mb-3 last:mb-0 text-sm sm:text-base leading-relaxed text-gray-800">
                                                    {children}
                                                </p>
                                            ),
                                            strong: ({children}) => (
                                                <strong className="font-semibold text-gray-900">
                                                    {children}
                                                </strong>
                                            ),
                                            em: ({children}) => (
                                                <em className="italic text-gray-700">
                                                    {children}
                                                </em>
                                            ),
                                            ul: ({children}) => (
                                                <ul className="list-disc list-inside mb-3 space-y-1 ml-2">
                                                    {children}
                                                </ul>
                                            ),
                                            ol: ({children}) => (
                                                <ol className="list-decimal list-inside mb-3 space-y-1 ml-2">
                                                    {children}
                                                </ol>
                                            ),
                                            li: ({children}) => (
                                                <li className="text-sm sm:text-base text-gray-800 leading-relaxed">
                                                    {children}
                                                </li>
                                            ),
                                            h1: ({children}) => (
                                                <h1 className="text-lg font-bold text-gray-900 mt-4 mb-2">
                                                    {children}
                                                </h1>
                                            ),
                                            h2: ({children}) => (
                                                <h2 className="text-base font-bold text-gray-900 mt-4 mb-2">
                                                    {children}
                                                </h2>
                                            ),
                                            h3: ({children}) => (
                                                <h3 className="text-sm font-bold text-gray-900 mt-3 mb-2">
                                                    {children}
                                                </h3>
                                            ),
                                            h4: ({children}) => (
                                                <h4 className="text-sm font-semibold text-gray-900 mt-3 mb-1">
                                                    {children}
                                                </h4>
                                            ),
                                            blockquote: ({children}) => (
                                                <blockquote className="border-l-4 border-blue-300 pl-4 italic text-gray-700 my-2">
                                                    {children}
                                                </blockquote>
                                            ),
                                            code: ({children}) => (
                                                <code className="bg-gray-100 px-1 py-0.5 rounded text-sm font-mono">
                                                    {children}
                                                </code>
                                            )
                                        }}
                                    >
                                        {cleanResponseText(message.text)}
                                    </ReactMarkdown>
                                </div>
                            )}
                        </div>

                        {/* Action Buttons for Bot Messages - FIXED FOR MOBILE */}
                        {!isUser && !isError && (
                            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mt-3 pt-2 border-t border-gray-100 space-y-2 sm:space-y-0">
                                <div className="flex items-center space-x-2 overflow-x-auto">
                                    {/* Copy Button */}
                                    <button
                                        onClick={() => copyToClipboard(message.text)}
                                        className="flex items-center space-x-1 px-2 py-1 text-xs text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-md transition-colors flex-shrink-0"
                                        title="Copy response"
                                    >
                                        {copySuccess ? (
                                            <>
                                                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                                </svg>
                                                <span className="hidden sm:inline">Copied!</span>
                                            </>
                                        ) : (
                                            <>
                                                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                                </svg>
                                                <span className="hidden sm:inline">Copy</span>
                                            </>
                                        )}
                                    </button>

                                    {/* Download Button */}
                                    <button
                                        onClick={downloadResponse}
                                        className="flex items-center space-x-1 px-2 py-1 text-xs text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-md transition-colors flex-shrink-0"
                                        title="Download as JSON"
                                    >
                                        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                        </svg>
                                        <span className="hidden sm:inline">JSON</span>
                                    </button>

                                    {/* Metadata Toggle */}
                                    <button
                                        onClick={() => setShowMetadata(!showMetadata)}
                                        className="flex items-center space-x-1 px-2 py-1 text-xs text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-md transition-colors flex-shrink-0"
                                        title="Show technical details"
                                    >
                                        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                        <span className="hidden sm:inline">Details</span>
                                    </button>

                                    {/* Sources Toggle */}
                                    {message.sources && message.sources.length > 0 && (
                                        <button
                                            onClick={() => setShowSources(!showSources)}
                                            className="flex items-center space-x-1 px-2 py-1 text-xs text-blue-600 hover:text-blue-700 hover:bg-blue-50 rounded-md transition-colors flex-shrink-0"
                                            title="View sources"
                                        >
                                            <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                                            </svg>
                                            <span>{message.sources.length}</span>
                                        </button>
                                    )}
                                </div>

                                {/* Feedback Buttons - FIXED FOR MOBILE */}
                                <div className="flex items-center space-x-1 flex-shrink-0">
                                    <span className="text-xs text-gray-400 mr-1 hidden sm:inline">Helpful?</span>
                                    {/* <span className="text-xs text-gray-400 mr-1 sm:hidden">üëçüëé</span> */}
                                    <button
                                        onClick={() => onFeedback(message.id, 'positive')}
                                        className={`p-1.5 sm:p-1 rounded transition-all flex-shrink-0 ${
                                            message.feedback === 'positive'
                                                ? 'bg-green-100 text-green-600'
                                                : 'text-gray-400 hover:bg-green-50 hover:text-green-600'
                                        }`}
                                        title="Helpful"
                                    >
                                        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5" />
                                        </svg>
                                    </button>
                                    <button
                                        onClick={() => onFeedback(message.id, 'negative')}
                                        className={`p-1.5 sm:p-1 rounded transition-all flex-shrink-0 ${
                                            message.feedback === 'negative'
                                                ? 'bg-red-100 text-red-600'
                                                : 'text-gray-400 hover:bg-red-50 hover:text-red-600'
                                        }`}
                                        title="Not helpful"
                                    >
                                        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 14H5.236a2 2 0 01-1.789-2.894l3.5-7A2 2 0 018.736 3h4.018c.163 0 .326.02.485.06L17 4m-7 10v2a2 2 0 002 2h.095c.5 0 .905-.405.905-.905 0-.714.211-1.412.608-2.006L17 13V4m-7 10h2m5-10h2a2 2 0 012 2v6a2 2 0 01-2 2h-2.5" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        )}
                    </div>

                    {/* Expandable Metadata */}
                    {showMetadata && !isUser && (
                        <div className="mt-2 bg-gray-50 rounded-lg p-3 text-xs space-y-2">
                            <div className="grid grid-cols-2 gap-2">
                                <div>
                                    <span className="font-medium text-gray-600">Model:</span>
                                    <span className="ml-1 text-gray-800">Gemini 1.5 Flash</span>
                                </div>
                                <div>
                                    <span className="font-medium text-gray-600">Time:</span>
                                    <span className="ml-1 text-gray-800">{message.generationTime?.toFixed(2)}s</span>
                                </div>
                                <div>
                                    <span className="font-medium text-gray-600">Context:</span>
                                    <span className="ml-1 text-gray-800">{message.hasContext ? 'Used' : 'None'}</span>
                                </div>
                                <div>
                                    <span className="font-medium text-gray-600">Timestamp:</span>
                                    <span className="ml-1 text-gray-800">{formatTimestamp(message.timestamp)}</span>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Expandable Sources */}
                    {showSources && message.sources && (
                        <div className="mt-2 bg-blue-50 rounded-lg p-3">
                            <h4 className="text-xs font-semibold text-blue-800 mb-2">Medical Sources:</h4>
                            <div className="space-y-1">
                                {message.sources.slice(0, 3).map((source, index) => (
                                    <div key={index} className="flex items-center space-x-2">
                                        <div className="w-1 h-1 bg-blue-500 rounded-full"></div>
                                        <span className="text-xs text-blue-700 truncate">
                                            {source.split('/').pop() || source}
                                        </span>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Timestamp */}
                    <div className={`text-xs text-gray-400 mt-2 ${isUser ? 'text-right' : 'text-left'}`}>
                        {formatTimestamp(message.timestamp)}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Message;
