from typing import List, Tuple
import faiss
import numpy as np
from nlp.embeddings import embed_texts

class FaissRetriever:
    def __init__(self, dim: int = None):
        self.index = None
        self.docs = []
        self.dim = dim

    def build(self, docs: List[str]):
        self.docs = docs
        embs = embed_texts(docs)
        self.dim = embs.shape[1]
        self.index = faiss.IndexFlatIP(self.dim)
        # normalize for cosine similarity
        faiss.normalize_L2(embs)
        self.index.add(embs)

    def query(self, q: str, top_k: int = 5) -> List[Tuple[str, float]]:
        q_emb = embed_texts([q])
        faiss.normalize_L2(q_emb)
        D, I = self.index.search(q_emb, top_k)
        results = []
        for idx, score in zip(I[0], D[0]):
            if idx == -1:
                continue
            results.append((self.docs[idx], float(score)))
        return results