import re
from typing import Dict, Any, List
from datetime import datetime

from app.services.rag.utils.logging_config import rag_logger

class MedicalResponseProcessor:
    """Post-process and enhance medical responses"""
    
    @staticmethod
    def add_safety_disclaimers(response: str, urgency_level: str = "routine") -> str:
        """Add appropriate medical disclaimers based on urgency level"""
        
        disclaimers = {
            "emergency": """
---
🚨 **EMERGENCY MEDICAL DISCLAIMER:** This appears to be a medical emergency. Call 911 or seek immediate emergency medical care. The information provided is for educational awareness only and cannot replace professional emergency medical treatment.
""",
            "high": """
---
⚠️ **URGENT MEDICAL DISCLAIMER:** This information is for educational purposes only. Please contact your healthcare provider or urgent care facility promptly for proper medical evaluation and treatment. Do not delay seeking professional medical care.
""",
            "routine": """
---
ℹ️ **MEDICAL DISCLAIMER:** This information is provided for educational purposes only and should not replace professional medical advice, diagnosis, or treatment. Always consult with qualified healthcare providers for medical concerns and treatment decisions.
"""
        }
        
        disclaimer = disclaimers.get(urgency_level, disclaimers["routine"])
        return response + disclaimer
    
    @staticmethod
    def format_medical_response(response: str, 
                               sources: List[str], 
                               metadata: Dict[str, Any]) -> str:
        """Format the complete medical response with sources and metadata"""
        
        formatted_response = response
        
        # Add source citations if available
        if sources:
            unique_sources = list(set(sources))
            source_text = "\n\n**Sources:**\n"
            for i, source in enumerate(unique_sources[:3], 1):  # Limit to 3 sources
                source_name = source.split('/')[-1] if '/' in source else source
                source_text += f"{i}. {source_name}\n"
            
            formatted_response += source_text
        
        # Add generation metadata
        model_used = metadata.get("model_used", "unknown")
        generation_time = metadata.get("generation_time", 0)
        timestamp = metadata.get("timestamp", datetime.now().isoformat())
        
        metadata_text = f"""
*Response generated by {model_used} in {generation_time:.2f}s | {timestamp[:19]}*"""
        
        formatted_response += metadata_text
        
        return formatted_response
    
    @staticmethod
    def detect_emergency_keywords(query: str) -> Dict[str, Any]:
        """Detect emergency keywords in user query"""
        
        emergency_patterns = [
            r'\b(chest pain|heart attack)\b',
            r'\b(can\'t breathe|difficulty breathing|shortness of breath)\b',
            r'\b(unconscious|passed out|unresponsive)\b',
            r'\b(severe bleeding|heavy bleeding)\b',
            r'\b(overdose|poisoning)\b',
            r'\b(suicide|self harm)\b',
            r'\b(stroke|can\'t speak)\b',
            r'\b(allergic reaction|anaphylaxis)\b',
            r'\b(911|emergency|urgent)\b'
        ]
        
        query_lower = query.lower()
        detected_emergencies = []
        
        for pattern in emergency_patterns:
            matches = re.findall(pattern, query_lower)
            if matches:
                detected_emergencies.extend(matches)
        
        is_emergency = len(detected_emergencies) > 0
        
        return {
            "is_emergency": is_emergency,
            "emergency_keywords": detected_emergencies,
            "urgency_level": "emergency" if is_emergency else "routine"
        }
    
    @staticmethod
    def clean_response_text(response: str) -> str:
        """Clean and normalize response text"""
        
        # Remove excessive whitespace
        response = re.sub(r'\n\s*\n\s*\n', '\n\n', response)
        response = re.sub(r' +', ' ', response)
        
        # Fix common formatting issues
        response = response.strip()
        
        # Ensure proper sentence spacing
        response = re.sub(r'\.(\w)', r'. \1', response)
        
        return response
    
    @staticmethod
    def validate_response_safety(response: str) -> Dict[str, Any]:
        """Validate response for medical safety compliance"""
        
        safety_checks = {
            "has_disclaimer": any(phrase in response.lower() for phrase in [
                "medical disclaimer", "consult", "healthcare provider", "professional medical"
            ]),
            "no_specific_diagnosis": not any(phrase in response.lower() for phrase in [
                "you have", "you are diagnosed", "you definitely", "it is certain"
            ]),
            "encourages_professional_care": any(phrase in response.lower() for phrase in [
                "see a doctor", "consult", "healthcare provider", "medical professional"
            ]),
            "appropriate_length": 50 <= len(response) <= 2000
        }
        
        safety_score = sum(safety_checks.values()) / len(safety_checks)
        is_safe = safety_score >= 0.75
        
        return {
            "is_safe": is_safe,
            "safety_score": safety_score,
            "safety_checks": safety_checks
        }
