


✨ Add Web-Based Interface with Streamlit
What's Added:

Streamlit frontend (app.py) for user interaction

CSV export feature

Basic data input and display

Chart visualizations with Plotly

How to Run:


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Terminal Interface</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        :root {
            --primary: #4f46e5;
            --secondary: #7c3aed;
            --accent: #8b5cf6;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        .terminal {
            background-color: #111827;
            color: #e5e7eb;
            font-family: 'Fira Code', monospace;
            border-radius: 0.5rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            flex-grow: 1;
            max-height: calc(100vh - 4rem);
            overflow-y: auto;
        }
        
        .command-input {
            background-color: transparent;
            color: inherit;
            caret-color: #93c5fd;
            flex-grow: 1;
        }
        
        .command-input:focus {
            outline: none;
        }
        
        .terminal-line::before {
            content: "$";
            color: #4ade80;
            margin-right: 0.5rem;
        }
        
        .terminal-output {
            color: #a5b4fc;
            white-space: pre-wrap;
        }
        
        .command-line {
            display: flex;
            align-items: center;
            padding: 0.5rem 1rem;
        }
        
        .prompt {
            color: #4ade80;
            margin-right: 0.5rem;
        }
        
        .result-section {
            background-color: #1e293b;
            padding: 1rem;
            border-radius: 0.5rem;
            margin: 0.5rem 1rem;
        }
        
        @media (max-width: 640px) {
            .terminal {
                border-radius: 0;
            }
        }
    </style>
</head>
<body class="bg-gradient-to-br from-gray-50 to-gray-100 p-4">
    <div class="max-w-6xl mx-auto">
        <header class="flex justify-between items-center mb-6">
            <div class="flex items-center">
                <img src="https://placehold.co/40x40" alt="Terminal application logo with a purple terminal window icon" class="mr-3 rounded-lg" />
                <h1 class="text-2xl font-bold text-gray-800">Web Terminal</h1>
            </div>
            <div class="flex space-x-2">
                <button class="px-3 py-1 bg-gray-200 hover:bg-gray-300 rounded-md text-gray-700 text-sm transition-colors">
                    Clear
                </button>
                <button class="px-3 py-1 bg-gray-200 hover:bg-gray-300 rounded-md text-gray-700 text-sm transition-colors">
                    Help
                </button>
            </div>
        </header>
        
        <div class="terminal flex flex-col">
            <div class="terminal-content p-2 flex-grow overflow-y-auto" id="terminalContent">
                <div class="terminal-line flex items-start mb-4">
                    <span class="prompt">$</span>
                    <div class="terminal-output">
                        Welcome to Web Terminal. Type 'help' to see available commands.
                    </div>
                </div>
                
                <div id="commandHistory"></div>
                
                <div class="command-line" id="currentCommand">
                    <span class="prompt">$</span>
                    <input 
                        type="text" 
                        class="command-input" 
                        id="commandInput" 
                        placeholder="Enter command..."
                        autocapitalize="off"
                        autocomplete="off"
                        spellcheck="false"
                    >
                </div>
            </div>
        </div>
        
        <div class="mt-4 flex justify-between text-sm text-gray-500">
            <div>Web Terminal v1.0</div>
            <div>Made with HTML, CSS & JavaScript</div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const commandInput = document.getElementById('commandInput');
            const commandHistory = document.getElementById('commandHistory');
            const terminalContent = document.getElementById('terminalContent');
            
            // Sample commands and responses
            const commands = {
                help: {
                    description: "Show available commands",
                    execute: () => `
Available commands:
- help: Show this help message
- clear: Clear the terminal
- ls: List directory contents
- date: Show current date and time
- echo [text]: Print the given text
- calculator: Open a calculator
- weather: Get current weather
`,
                    outputType: 'terminal'
                },
                clear: {
                    description: "Clear the terminal",
                    execute: () => {
                        commandHistory.innerHTML = '';
                        return '';
                    },
                    outputType: 'clear'
                },
                ls: {
                    description: "List directory contents",
                    execute: () => `
app.js\t\tpackage.json\tREADME.md\tpublic/
controllers/\tmodels/\t\troutes/\t\tnode_modules/
`,
                    outputType: 'terminal'
                },
                date: {
                    description: "Show current date and time",
                    execute: () => new Date().toString(),
                    outputType: 'terminal'
                },
                echo: {
                    description: "Print the given text",
                    execute: (args) => args.join(' '),
                    outputType: 'terminal'
                },
                calculator: {
                    description: "Open a calculator",
                    execute: () => {
                        return `
<div class="result-section">
    <h3 class="font-bold text-white mb-2">Calculator</h3>
    <div class="grid grid-cols-4 gap-2">
        <button class="calc-btn bg-gray-700 hover:bg-gray-600 rounded p-2" value="7">7</button>
        <button class="calc-btn bg-gray-700 hover:bg-gray-600 rounded p-2" value="8">8</button>
        <button class="calc-btn bg-gray-700 hover:bg-gray-600 rounded p-2" value="9">9</button>
        <button class="calc-btn bg-blue-600 hover:bg-blue-500 rounded p-2" value="/">/</button>
        
        <button class="calc-btn bg-gray-700 hover:bg-gray-600 rounded p-2" value="4">4</button>
        <button class="calc-btn bg-gray-700 hover:bg-gray-600 rounded p-2" value="5">5</button>
        <button class="calc-btn bg-gray-700 hover:bg-gray-600 rounded p-2" value="6">6</button>
        <button class="calc-btn bg-blue-600 hover:bg-blue-500 rounded p-2" value="*">*</button>
        
        <button class="calc-btn bg-gray-700 hover:bg-gray-600 rounded p-2" value="1">1</button>
        <button class="calc-btn bg-gray-700 hover:bg-gray-600 rounded p-2" value="2">2</button>
        <button class="calc-btn bg-gray-700 hover:bg-gray-600 rounded p-2" value="3">3</button>
        <button class="calc-btn bg-blue-600 hover:bg-blue-500 rounded p-2" value="-">-</button>
        
        <button class="calc-btn bg-gray-700 hover:bg-gray-600 rounded p-2" value="0">0</button>
        <button class="calc-btn bg-gray-700 hover:bg-gray-600 rounded p-2" value=".">.</button>
        <button class="calc-btn bg-green-600 hover:bg-green-500 rounded p-2" value="=">=</button>
        <button class="calc-btn bg-blue-600 hover:bg-blue-500 rounded p-2" value="+">+</button>
    </div>
    <div class="mt-3">
        <input type="text" id="calc-result" class="w-full bg-gray-800 text-white p-2 rounded" readonly>
    </div>
</div>
`;
                    },
                    outputType: 'html'
                },
                weather: {
                    description: "Get current weather",
                    execute: () => {
                        return `
<div class="result-section">
    <div class="flex items-center mb-2">
        <img src="https://placehold.co/60x60" alt="Weather icon showing sunny conditions with bright yellow sun on blue background" class="mr-3"/>
        <div>
            <h3 class="font-bold text-white">Current Weather</h3>
            <p>Sunny, 28°C</p>
        </div>
    </div>
    <div class="grid grid-cols-3 gap-2 text-center">
        <div class="bg-gray-800 p-2 rounded">
            <div class="text-xs text-gray-400">Humidity</div>
            <div class="font-medium">65%</div>
        </div>
        <div class="bg-gray-800 p-2 rounded">
            <div class="text-xs text-gray-400">Wind</div>
            <div class="font-medium">12 km/h</div>
        </div>
        <div class="bg-gray-800 p-2 rounded">
            <div class="text-xs text-gray-400">Pressure</div>
            <div class="font-medium">1012 hPa</div>
        </div>
    </div>
</div>
`;
                    },
                    outputType: 'html'
                }
            };

            // Handle command execution
            function executeCommand(input) {
                // Skip empty commands
                if (!input.trim()) return;

                // Split command and arguments
                const parts = input.split(/ +/);
                const command = parts[0].toLowerCase();
                const args = parts.slice(1);

                // Display the command
                const commandDisplay = document.createElement('div');
                commandDisplay.className = 'terminal-line flex items-start mb-2';
                commandDisplay.innerHTML = `<span class="prompt">$</span> <div class="terminal-output">${input}</div>`;
                commandHistory.appendChild(commandDisplay);

                // Execute command if it exists
                if (commands[command]) {
                    const result = commands[command].execute(args);
                    
                    if (commands[command].outputType === 'terminal') {
                        const resultElement = document.createElement('div');
                        resultElement.className = 'terminal-line flex items-start mb-4';
                        resultElement.innerHTML = `<div class="terminal-output">${result}</div>`;
                        commandHistory.appendChild(resultElement);
                    } 
                    else if (commands[command].outputType === 'html') {
                        const resultElement = document.createElement('div');
                        resultElement.className = 'mb-4';
                        resultElement.innerHTML = result;
                        commandHistory.appendChild(resultElement);
                        
                        // Add calculator event listeners if calculator was opened
                        if (command === 'calculator') {
                            setupCalculator();
                        }
                    } 
                    else if (commands[command].outputType === 'clear') {
                        // Clear command handles its own UI changes
                        result; // Call the function
                    }
                } 
                else {
                    const errorElement = document.createElement('div');
                    errorElement.className = 'terminal-line flex items-start mb-4';
                    errorElement.innerHTML = `<div class="text-red-400">Command not found: ${command}</div>`;
                    commandHistory.appendChild(errorElement);
                }

                // Scroll to bottom
                terminalContent.scrollTop = terminalContent.scrollHeight;
            }

            // Handle calculator operations
            function setupCalculator() {
                const calcBtns = document.querySelectorAll('.calc-btn');
                const calcResult = document.getElementById('calc-result');
                
                calcBtns.forEach(btn => {
                    btn.addEventListener('click', function() {
                        const value = this.value;
                        
                        if (value === '=') {
                            try {
                                const result = eval(calcResult.value);
                                calcResult.value = result !== undefined ? result : '';
                            } catch (e) {
                                calcResult.value = 'Error';
                            }
                        } else {
                            calcResult.value += value;
                        }
                    });
                });
            }

            // Handle command input
            commandInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    executeCommand(this.value);
                    this.value = '';
                }
            });

            // Focus input on startup and whenever clicking in the terminal
            commandInput.focus();
            terminalContent.addEventListener('click', function() {
                commandInput.focus();
            });

            // Handle clear button
            document.querySelector('button:first-of-type').addEventListener('click', function() {
                commands.clear.execute();
            });

            // Handle help button
            document.querySelector('button:last-of-type').addEventListener('click', function() {
                executeCommand('help');
            });
        });
    </script>
</body>
</html>
